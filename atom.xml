<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>追书吧</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.bookmounting.com/"/>
  <updated>2019-07-12T02:54:57.175Z</updated>
  <id>http://www.bookmounting.com/</id>
  
  <author>
    <name>oyzq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linkpage</title>
    <link href="http://www.bookmounting.com/12/linkpage/"/>
    <id>http://www.bookmounting.com/12/linkpage/</id>
    <published>2019-07-12T02:20:35.000Z</published>
    <updated>2019-07-12T02:54:57.175Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">hexo史上最全搭建教程</a></p><p><a href="https://www.cnblogs.com/sniperHW/p/4172248.html" target="_blank" rel="noopener">基于数组无锁队列</a></p><p><a href="http://moodycamel.com/blog/2014/a-fast-general-purpose-lock-free-queue-for-c++" target="_blank" rel="noopener">块式链表无锁队列</a></p><p><a href="https://www.cnblogs.com/FateTHarlaown/p/8919235.html" target="_blank" rel="noopener">C++11的原子量与内存序浅析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/sinat_37781304/article/details/82729029&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo史上最全搭建教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LockFree-简单数组无锁队列</title>
    <link href="http://www.bookmounting.com/12/LockFree-%E7%AE%80%E5%8D%95%E6%95%B0%E7%BB%84%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97/"/>
    <id>http://www.bookmounting.com/12/LockFree-简单数组无锁队列/</id>
    <published>2019-07-12T01:42:04.000Z</published>
    <updated>2019-07-12T01:54:11.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>支持SPSC（单生产者单消费者）的无锁队列。基于数组实现，避免了多线程中的内存动态分配。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>利用C++ 11的原子量实现原子操作和CAS。</p><p>writeIndex:新元素入列时存放位置在数组中的下标。</p><p>readIndex:下一个出列元素在数组中的下标。</p><p>当readIndex小于writeIndex时，可读。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>ArrayLockFreeQueue.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _ARRAYLOCKFREEQUEUE_H___</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ARRAYLOCKFREEQUEUE_H___</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUEUE_INT unsigned long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARRAY_LOCK_FREE_Q_DEFAULT_SIZE 65535 <span class="comment">// 2^16</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE = ARRAY_LOCK_FREE_Q_DEFAULT_SIZE&gt;</span><br><span class="line">class ArrayLockFreeQueue</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">ArrayLockFreeQueue();</span><br><span class="line"><span class="keyword">virtual</span> ~ArrayLockFreeQueue();</span><br><span class="line"></span><br><span class="line"><span class="function">QUEUE_INT <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">const</span> ELEM_T &amp;a_data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dequeue</span><span class="params">(ELEM_T &amp;a_data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">try_dequeue</span><span class="params">(ELEM_T &amp;a_data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">ELEM_T m_thequeue[Q_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">atomic_ulong</span> m_writeIndex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">atomic_ulong</span> m_readIndex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">atomic_ulong</span> m_maximumReadIndex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> QUEUE_INT <span class="title">countToIndex</span><span class="params">(QUEUE_INT a_count)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ArrayLockFreeQueueImp.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>ArrayLockFreeQueueImp.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _ARRAYLOCKFREEQUEUEIMP_H___</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ARRAYLOCKFREEQUEUEIMP_H___</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ArrayLockFreeQueue.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE&gt;</span><br><span class="line">ArrayLockFreeQueue&lt;ELEM_T, Q_SIZE&gt;::ArrayLockFreeQueue() :</span><br><span class="line">m_writeIndex(<span class="number">0</span>),</span><br><span class="line">m_readIndex(<span class="number">0</span>),</span><br><span class="line">m_maximumReadIndex(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE&gt;</span><br><span class="line">ArrayLockFreeQueue&lt;ELEM_T, Q_SIZE&gt;::~ArrayLockFreeQueue()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE&gt;</span><br><span class="line"><span class="keyword">inline</span> QUEUE_INT ArrayLockFreeQueue&lt;ELEM_T, Q_SIZE&gt;::countToIndex(QUEUE_INT a_count)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (a_count % Q_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE&gt;</span><br><span class="line">QUEUE_INT ArrayLockFreeQueue&lt;ELEM_T, Q_SIZE&gt;::size()</span><br><span class="line">&#123;</span><br><span class="line">QUEUE_INT currentWriteIndex = m_writeIndex;</span><br><span class="line">QUEUE_INT currentReadIndex = m_readIndex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (currentWriteIndex &gt;= currentReadIndex)</span><br><span class="line"><span class="keyword">return</span> currentWriteIndex - currentReadIndex;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> Q_SIZE + currentWriteIndex - currentReadIndex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE&gt;</span><br><span class="line"><span class="keyword">bool</span> ArrayLockFreeQueue&lt;ELEM_T, Q_SIZE&gt;::enqueue(<span class="keyword">const</span> ELEM_T &amp;a_data)</span><br><span class="line">&#123;</span><br><span class="line">QUEUE_INT currentWriteIndex;</span><br><span class="line"><span class="comment">//QUEUE_INT currentReadIndex;</span></span><br><span class="line"></span><br><span class="line">currentWriteIndex = m_writeIndex;</span><br><span class="line"><span class="comment">//currentReadIndex = m_readIndex;</span></span><br><span class="line"></span><br><span class="line">m_thequeue[countToIndex(currentWriteIndex)] = a_data;</span><br><span class="line">m_writeIndex++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE&gt;</span><br><span class="line"><span class="keyword">bool</span> ArrayLockFreeQueue&lt;ELEM_T, Q_SIZE&gt;::try_dequeue(ELEM_T &amp;a_data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> dequeue(a_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE&gt;</span><br><span class="line"><span class="keyword">bool</span> ArrayLockFreeQueue&lt;ELEM_T, Q_SIZE&gt;::dequeue(ELEM_T &amp;a_data)</span><br><span class="line">&#123;</span><br><span class="line">QUEUE_INT currentMaximumReadIndex;</span><br><span class="line">QUEUE_INT currentReadIndex;</span><br><span class="line"><span class="comment">//只支持一写一读，多读时单个线程不能读到队列的所有数</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">currentReadIndex = m_readIndex;</span><br><span class="line">currentMaximumReadIndex = m_writeIndex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (countToIndex(currentReadIndex) == countToIndex(currentMaximumReadIndex))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a_data = m_thequeue[countToIndex(currentReadIndex)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m_readIndex.compare_exchange_weak(currentReadIndex, (currentReadIndex + <span class="number">1</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;支持SPSC（单生产者单消费者）的无锁队列。基于数组实现，避免了多线程中的内存动态分配。&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="C++ LockFree" scheme="http://www.bookmounting.com/tags/C-LockFree/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.bookmounting.com/11/hello-world/"/>
    <id>http://www.bookmounting.com/11/hello-world/</id>
    <published>2019-07-11T09:51:30.766Z</published>
    <updated>2019-07-11T09:51:30.767Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
