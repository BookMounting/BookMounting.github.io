<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>追书吧</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.bookmounting.com/"/>
  <updated>2019-07-26T01:05:49.257Z</updated>
  <id>http://www.bookmounting.com/</id>
  
  <author>
    <name>oyzq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>3步搞定vnpy</title>
    <link href="http://www.bookmounting.com/26/3%E6%AD%A5%E6%90%9E%E5%AE%9Avnpy/"/>
    <id>http://www.bookmounting.com/26/3步搞定vnpy/</id>
    <published>2019-07-26T00:55:11.000Z</published>
    <updated>2019-07-26T01:05:49.257Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>Anaconda要先安装好，注意选择Python3.7的最新版。</p><p>从github上下载最新的vnpy</p><h3 id="创建vnpy环境"><a href="#创建vnpy环境" class="headerlink" title="创建vnpy环境"></a>创建vnpy环境</h3><p>Anaconda Prompt下进入vnpy所在目录，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name test-vnpy python=3.7</span><br></pre></td></tr></table></figure><p>激活：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate vnpy-test</span><br></pre></td></tr></table></figure><h2 id="编译vnpy"><a href="#编译vnpy" class="headerlink" title="编译vnpy"></a>编译vnpy</h2><p>vnpy提供了一键安装依赖和编译的脚本，在Anaconda Prompt下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install.bat</span><br></pre></td></tr></table></figure><h3 id="安装vnpy-test的Spyder"><a href="#安装vnpy-test的Spyder" class="headerlink" title="安装vnpy-test的Spyder"></a>安装vnpy-test的Spyder</h3><p>打开Anaconda Navigator工具，选择到vnpy-test，安装Spyder。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>打开Spyder(vnpy-test)，新建Python文件，执行以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Fri Jul 26 08:44:53 2019</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Administrator</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> vnpy.event <span class="keyword">import</span> EventEngine</span><br><span class="line"><span class="keyword">from</span> vnpy.trader.engine <span class="keyword">import</span> MainEngine</span><br><span class="line"><span class="keyword">from</span> vnpy.trader.ui <span class="keyword">import</span> MainWindow, create_qapp</span><br><span class="line"><span class="keyword">from</span> vnpy.gateway.ctp <span class="keyword">import</span> CtpGateway</span><br><span class="line"><span class="keyword">from</span> vnpy.app.cta_strategy <span class="keyword">import</span> CtaStrategyApp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Start VN Trader"""</span></span><br><span class="line">    qapp = create_qapp()</span><br><span class="line"></span><br><span class="line">    event_engine = EventEngine()</span><br><span class="line">    main_engine = MainEngine(event_engine)</span><br><span class="line"></span><br><span class="line">    main_engine.add_gateway(CtpGateway)</span><br><span class="line">    main_engine.add_app(CtaStrategyApp)</span><br><span class="line"></span><br><span class="line">    main_window = MainWindow(main_engine, event_engine)</span><br><span class="line">    main_window.showMaximized()</span><br><span class="line"></span><br><span class="line">    qapp.exec()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;Anaconda要先安装好，注意选择Python3.7的最新版。&lt;/p&gt;
&lt;p&gt;从github上下载最新的vnpy&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
    
      <category term="vnpy" scheme="http://www.bookmounting.com/tags/vnpy/"/>
    
  </entry>
  
  <entry>
    <title>LockFree-ABA与指令重排问题</title>
    <link href="http://www.bookmounting.com/16/LockFree-ABA%E4%B8%8E%E6%8C%87%E4%BB%A4%E9%87%8D%E6%8E%92%E9%97%AE%E9%A2%98/"/>
    <id>http://www.bookmounting.com/16/LockFree-ABA与指令重排问题/</id>
    <published>2019-07-16T00:46:43.000Z</published>
    <updated>2019-07-16T00:50:44.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ABA"><a href="#ABA" class="headerlink" title="ABA"></a>ABA</h2><p>在多线程编程中，最常拿来举例的问题便是著名的i++ 问题，即：多个线程对同一个共享变量i执行i++ 操作。这样做之所以会出现问题的原因在于i++这个操作可以分为三个步骤：</p><table><thead><tr><th align="center">step</th><th align="center">operation</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">i-&gt;reg(读取i的值到寄存器)</td></tr><tr><td align="center">2</td><td align="center">inc-reg(在寄存器中自增i的值)</td></tr><tr><td align="center">3</td><td align="center">reg-&gt;i (写回内存中的i)</td></tr></tbody></table><p>上面三个步骤中间是可以间隔的，并非原子操作，也就是说多个线程同时执行的时候可能出步骤的交叉执行，例如下面的情况：</p><table><thead><tr><th align="center">step</th><th align="center">thread A</th><th align="center">thread B</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">i-&gt;reg</td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">inc-reg</td><td align="center"></td></tr><tr><td align="center">3</td><td align="center"></td><td align="center">i-&gt;reg</td></tr><tr><td align="center">4</td><td align="center"></td><td align="center">inc-reg</td></tr><tr><td align="center">5</td><td align="center">reg-&gt;i</td><td align="center"></td></tr><tr><td align="center">6</td><td align="center"></td><td align="center">reg-&gt;i</td></tr></tbody></table><p>假设i一开始为0，则执行完第4步后，在两个线程都认为寄存器中的值为1，然后在第5、6两步分别写回去。最终两个线程执行完成后i的值为1。但是实际上我们在两个线程中执行了i++，原本希望i的值为2。i++ 实际上可以代表多线程编程中由于操作不是原子的而引发的交叉执行这一类的问题，但是在这里我们先只关注对单个变量的操作。</p><h2 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h2><p>有时候，我们会用一个变量作为标志位，当这个变量等于某个特定值的时候就进行某些操作。但是这样依然可能会有一些意想不到的坑，例如两个线程以如下顺序执行：</p><table><thead><tr><th align="center">step</th><th align="center">thread A</th><th align="center">thread B</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">a = 1</td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">flag= true</td><td align="center"></td></tr><tr><td align="center">3</td><td align="center"></td><td align="center">if flag== true</td></tr><tr><td align="center">4</td><td align="center"></td><td align="center">assert(a == 1)</td></tr></tbody></table><p>当B判断flag为true后，断言a为1，看起来的确是这样。那么一定是这样吗？可能不是，因为编译器和CPU都可能将指令进行重排（编译器不同等级的优化和CPU的乱序执行）。实际上的执行顺序可能变成这样：</p><table><thead><tr><th align="center">step</th><th align="center">thread A</th><th align="center">thread B</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">flag = true</td><td align="center"></td></tr><tr><td align="center">2</td><td align="center"></td><td align="center">if flag== true</td></tr><tr><td align="center">3</td><td align="center"></td><td align="center">assert(a == 1)</td></tr><tr><td align="center">4</td><td align="center">a = 1</td><td align="center"></td></tr></tbody></table><p>这种重排有可能会导致一个线程内相互之间不存在依赖关系的指令交换执行顺序，以获得更高的执行效率。比如上面：flag 与 a 在A线程看起来是没有任何依赖关系，似乎执行顺序无关紧要。但问题在于B使用了flag作为是否读取a的依据，A的指令重排可能会导致step3的时候断言失败。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>一个比较稳妥的办法就是对于共享变量的访问进行加锁，加锁可以保证对临界区的互斥访问，例如第一种场景如果加锁后再执行i++ 然后解锁，则同一时刻只会有一个线程在执行i++ 操作。另外，加锁的内存语义能保证一个线程在释放锁前的写入操作一定能被之后加锁的线程所见（即有happens before 语义），可以避免第二种场景中读取到错误的值。</p><p>那么如果觉得加锁操作过重太麻烦而不想加锁呢？C++11提供了一些原子变量与原子操作来支持。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ABA&quot;&gt;&lt;a href=&quot;#ABA&quot; class=&quot;headerlink&quot; title=&quot;ABA&quot;&gt;&lt;/a&gt;ABA&lt;/h2&gt;&lt;p&gt;在多线程编程中，最常拿来举例的问题便是著名的i++ 问题，即：多个线程对同一个共享变量i执行i++ 操作。这样做之所以会出现问题的原
      
    
    </summary>
    
    
      <category term="C++" scheme="http://www.bookmounting.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>功夫安装</title>
    <link href="http://www.bookmounting.com/15/%E5%8A%9F%E5%A4%AB%E5%AE%89%E8%A3%85/"/>
    <id>http://www.bookmounting.com/15/功夫安装/</id>
    <published>2019-07-15T02:28:47.000Z</published>
    <updated>2019-07-16T00:52:13.272Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><p>Centos 7</p><p>gcc 7.2+ 要支持C++17</p><p>cmake (&gt;3.12)</p><p>python 2.7</p><p>pip</p><p>git</p><p>Node.js (&gt;=8 &lt;11)</p><p>npm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#yum -y install centos-release-scl</span><br><span class="line">#yum -y install devtoolset-7-gcc devtoolset-7-gcc-c++ devtoolset-7-binutils</span><br><span class="line">#echo &quot;source /opt/rh/devtoolset-7/enable&quot; &gt;&gt; /etc/profile</span><br><span class="line">#source /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#npm install -g yarn electron-builder</span><br><span class="line">#pip install pipenv</span><br></pre></td></tr></table></figure><p>设置环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=$HOME/bin:/opt/nodejs/bin:/opt/rh/devtoolset-7/root/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin</span><br></pre></td></tr></table></figure><p>设置镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm config set registry https://registry.npm.taobao.org</span><br><span class="line">$ npm config set electron_mirror https://npm.taobao.org/mirrors/electron/</span><br><span class="line">$ npm config set PUPPETEER_DOWNLOAD_HOST https://npm.taobao.org/mirrors</span><br><span class="line">$ npm config set puppeteer_download_host https://npm.taobao.org/mirrors</span><br><span class="line">$ npm config set sass-binary-site http://npm.taobao.org/mirrors/node-sass</span><br></pre></td></tr></table></figure><h2 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h2><p><strong>常规操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/taurusai/kungfu</span><br><span class="line">$ cd kungfu</span><br><span class="line">$ yarn install</span><br><span class="line">$ yarn workspaces run build</span><br></pre></td></tr></table></figure><p>遇到编译问题需要完整的重新编译时，执行以下命令清理临时文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn workspaces run clean</span><br></pre></td></tr></table></figure><p><strong>编译模式</strong></p><p>功夫默认编译为 Release 模式（-D<a href="https://cmake.org/cmake/help/v3.12/variable/CMAKE_BUILD_TYPE.html" target="_blank" rel="noopener">CMAKE_BUILD_TYPE</a>=”Release”)，如果希望以 Debug 模式编译，需要执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config set kungfu-core:cmakejsopt &quot;debug&quot;</span><br></pre></td></tr></table></figure><p>执行以下命令恢复 Release 模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config delete kungfu-core:cmakejsopt</span><br></pre></td></tr></table></figure><p>更多可选设置请参考 <a href="https://www.npmjs.com/package/cmake-js" target="_blank" rel="noopener">CMake.js Options</a>。</p><p>切换编译模式后，需要执行以下命令重新生成配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn workspace kungfu-core run config</span><br></pre></td></tr></table></figure><p><strong>选择 Python 版本</strong></p><p>功夫支持 Python 2 及 Python 3，在系统预装了相应版本的情况下，编译时可以自行选择所需的 Python 版本。<br>执行以下命令选择 Python 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config set kungfu-core:pyver three</span><br></pre></td></tr></table></figure><p>执行以下命令选择 Python 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config set kungfu-core:pyver two</span><br></pre></td></tr></table></figure><p>切换 Python 版本后，需要执行以下命令重新生成配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn workspace kungfu-core run config</span><br></pre></td></tr></table></figure><p><strong>编译过程产生的临时文件</strong></p><p>编译过程会在代码所在目录下生成如下临时文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">build</span><br><span class="line">dist</span><br></pre></td></tr></table></figure><p>通常情况下可通过执行如下命令对 build 和 dist 进行清理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn workspaces run clean</span><br></pre></td></tr></table></figure><p>需要注意 node_modules 目录为 npm 产生的包目录，一般情况下无需清除，如有特殊需要可手动删除。</p><p>另外，编译过程中会在系统的以下路径产生输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$HOME/.cmake-js                     # cmake.js 存储的 C++ 依赖包</span><br><span class="line">$HOME/.virtualenvs                  # pipenv(windows) 存储的 Python 依赖</span><br><span class="line">$HOME/.local/share/virtualenvs      # pipenv(unix) 存储的 Python 依赖</span><br></pre></td></tr></table></figure><p>如果需要清理这些文件，都需要手动删除。</p><p><strong>编译时遇到的问题</strong></p><p>1.已经安装anaconda，yarn install失败？</p><p>删除anaconda，rm -rf anaconda*</p><p>2.error Couldn’t find package “pm2@^3.5.0” required by “<a href="mailto:kungfu@2.0.0" target="_blank" rel="noopener">kungfu@2.0.0</a>“ on the “npm” registry</p><p>$ npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><p>3.error /root/kungfu/node_modules/kungfu-core: Command failed.<br>Exit code: 127<br>Command: echo postinstall at $(pwd) &amp;&amp; pipenv install &amp;&amp; yarn run config:cmake</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础环境&quot;&gt;&lt;a href=&quot;#基础环境&quot; class=&quot;headerlink&quot; title=&quot;基础环境&quot;&gt;&lt;/a&gt;基础环境&lt;/h2&gt;&lt;p&gt;Centos 7&lt;/p&gt;
&lt;p&gt;gcc 7.2+ 要支持C++17&lt;/p&gt;
&lt;p&gt;cmake (&amp;gt;3.12)&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="kungfu" scheme="http://www.bookmounting.com/tags/kungfu/"/>
    
  </entry>
  
  <entry>
    <title>引用网页</title>
    <link href="http://www.bookmounting.com/12/%E5%BC%95%E7%94%A8%E7%BD%91%E9%A1%B5/"/>
    <id>http://www.bookmounting.com/12/引用网页/</id>
    <published>2019-07-12T02:20:35.000Z</published>
    <updated>2019-07-16T00:52:24.041Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">hexo史上最全搭建教程</a></p><p><a href="https://www.cnblogs.com/sniperHW/p/4172248.html" target="_blank" rel="noopener">基于数组无锁队列</a></p><p><a href="http://moodycamel.com/blog/2014/a-fast-general-purpose-lock-free-queue-for-c++" target="_blank" rel="noopener">块式链表无锁队列</a></p><p><a href="https://www.cnblogs.com/FateTHarlaown/p/8919235.html" target="_blank" rel="noopener">C++11的原子量与内存序浅析</a></p><p><a href="https://www.huihut.com/interview/#/" target="_blank" rel="noopener">C++ 基础</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/sinat_37781304/article/details/82729029&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo史上最全搭建教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LockFree-简单数组无锁队列</title>
    <link href="http://www.bookmounting.com/12/LockFree-%E7%AE%80%E5%8D%95%E6%95%B0%E7%BB%84%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97/"/>
    <id>http://www.bookmounting.com/12/LockFree-简单数组无锁队列/</id>
    <published>2019-07-12T01:42:04.000Z</published>
    <updated>2019-07-16T00:54:32.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>支持SPSC（单生产者单消费者）的无锁队列。基于数组实现，避免了多线程中的内存动态分配。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>利用C++ 11的原子量实现原子操作和CAS。</p><p>writeIndex:新元素入列时存放位置在数组中的下标。</p><p>readIndex:下一个出列元素在数组中的下标。</p><p>当readIndex小于writeIndex时，可读。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>ArrayLockFreeQueue.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _ARRAYLOCKFREEQUEUE_H___</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ARRAYLOCKFREEQUEUE_H___</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUEUE_INT unsigned long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ARRAY_LOCK_FREE_Q_DEFAULT_SIZE 65535 <span class="comment">// 2^16</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE = ARRAY_LOCK_FREE_Q_DEFAULT_SIZE&gt;</span><br><span class="line">class ArrayLockFreeQueue</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">ArrayLockFreeQueue();</span><br><span class="line"><span class="keyword">virtual</span> ~ArrayLockFreeQueue();</span><br><span class="line"></span><br><span class="line"><span class="function">QUEUE_INT <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">const</span> ELEM_T &amp;a_data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dequeue</span><span class="params">(ELEM_T &amp;a_data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">try_dequeue</span><span class="params">(ELEM_T &amp;a_data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">ELEM_T m_thequeue[Q_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">atomic_ulong</span> m_writeIndex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">atomic_ulong</span> m_readIndex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">atomic_ulong</span> m_maximumReadIndex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> QUEUE_INT <span class="title">countToIndex</span><span class="params">(QUEUE_INT a_count)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ArrayLockFreeQueueImp.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>ArrayLockFreeQueueImp.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _ARRAYLOCKFREEQUEUEIMP_H___</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ARRAYLOCKFREEQUEUEIMP_H___</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ArrayLockFreeQueue.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE&gt;</span><br><span class="line">ArrayLockFreeQueue&lt;ELEM_T, Q_SIZE&gt;::ArrayLockFreeQueue() :</span><br><span class="line">m_writeIndex(<span class="number">0</span>),</span><br><span class="line">m_readIndex(<span class="number">0</span>),</span><br><span class="line">m_maximumReadIndex(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE&gt;</span><br><span class="line">ArrayLockFreeQueue&lt;ELEM_T, Q_SIZE&gt;::~ArrayLockFreeQueue()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE&gt;</span><br><span class="line"><span class="keyword">inline</span> QUEUE_INT ArrayLockFreeQueue&lt;ELEM_T, Q_SIZE&gt;::countToIndex(QUEUE_INT a_count)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (a_count % Q_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE&gt;</span><br><span class="line">QUEUE_INT ArrayLockFreeQueue&lt;ELEM_T, Q_SIZE&gt;::size()</span><br><span class="line">&#123;</span><br><span class="line">QUEUE_INT currentWriteIndex = m_writeIndex;</span><br><span class="line">QUEUE_INT currentReadIndex = m_readIndex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (currentWriteIndex &gt;= currentReadIndex)</span><br><span class="line"><span class="keyword">return</span> currentWriteIndex - currentReadIndex;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> Q_SIZE + currentWriteIndex - currentReadIndex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE&gt;</span><br><span class="line"><span class="keyword">bool</span> ArrayLockFreeQueue&lt;ELEM_T, Q_SIZE&gt;::enqueue(<span class="keyword">const</span> ELEM_T &amp;a_data)</span><br><span class="line">&#123;</span><br><span class="line">QUEUE_INT currentWriteIndex;</span><br><span class="line"><span class="comment">//QUEUE_INT currentReadIndex;</span></span><br><span class="line"></span><br><span class="line">currentWriteIndex = m_writeIndex;</span><br><span class="line"><span class="comment">//currentReadIndex = m_readIndex;</span></span><br><span class="line"></span><br><span class="line">m_thequeue[countToIndex(currentWriteIndex)] = a_data;</span><br><span class="line">m_writeIndex++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE&gt;</span><br><span class="line"><span class="keyword">bool</span> ArrayLockFreeQueue&lt;ELEM_T, Q_SIZE&gt;::try_dequeue(ELEM_T &amp;a_data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> dequeue(a_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ELEM_T, QUEUE_INT Q_SIZE&gt;</span><br><span class="line"><span class="keyword">bool</span> ArrayLockFreeQueue&lt;ELEM_T, Q_SIZE&gt;::dequeue(ELEM_T &amp;a_data)</span><br><span class="line">&#123;</span><br><span class="line">QUEUE_INT currentMaximumReadIndex;</span><br><span class="line">QUEUE_INT currentReadIndex;</span><br><span class="line"><span class="comment">//只支持一写一读，多读时单个线程不能读到队列的所有数</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">currentReadIndex = m_readIndex;</span><br><span class="line">currentMaximumReadIndex = m_writeIndex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (countToIndex(currentReadIndex) == countToIndex(currentMaximumReadIndex))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a_data = m_thequeue[countToIndex(currentReadIndex)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m_readIndex.compare_exchange_weak(currentReadIndex, (currentReadIndex + <span class="number">1</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;支持SPSC（单生产者单消费者）的无锁队列。基于数组实现，避免了多线程中的内存动态分配。&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="C++,LockFree" scheme="http://www.bookmounting.com/tags/C-LockFree/"/>
    
  </entry>
  
</feed>
